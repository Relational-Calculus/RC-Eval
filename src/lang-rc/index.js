import { LRParser } from '@lezer/lr';
import { LRLanguage, indentNodeProp, delimitedIndent, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_word = {__proto__:null,CNT:24, AVG:26, MED:28, MAX:30, MIN:32, SUM:34, "∧":40, AND:42, "∨":44, OR:46, "⇒":48, IMPLIES:50, "∃":54, EXISTS:56, "∀":60, FORALL:62, "¬":64, NOT:66, LET:68, IN:70};
const parser = LRParser.deserialize({
  version: 14,
  states: "*zQVQPOOO}QPO'#C_O!YOQO'#C`O!hOSO'#C`O!vQPO'#C^O#OQPO'#C^O#TQPO'#CcOOQO'#DX'#DXOVQPO'#DXQ#YQPOOOVQPO'#DXO#nQPO'#CvOOQO'#Cv'#CvO#sQPO'#DXOOOO'#DQ'#DQO$kOQO,58zOOQO,58z,58zOOOO'#DR'#DRO$yOSO,58zO%XQPO,58xO%jQPO,59RO&OQPO,58}O&^QPO,59sOVQPO,59sOOQO'#Co'#CoO&kQPO,59sOOQO'#C_'#C_O&rQPO'#CnO'pQPO,59bO'uQWO,59sOOOO-E7O-E7OOOQO1G.f1G.fOOOO-E7P-E7PO(eQPO1G.dO(rQPO1G.dO#nQPO1G.mO)QQPO'#CfO)YQPO1G.iOOQO1G/_1G/_O#nQPO'#DTO)_QPO,59YOOQO1G.|1G.|O*]QWO,59sOVQPO1G/_O*dQPO7+$OO+QQPO7+$OO+_QPO7+$XO,YQPO'#DSO,hQPO,59QOOQO7+$T7+$TOOQO,59o,59oOOQO-E7R-E7RO,pQWO1G.dO,wQPO7+$yOOQO<<Gj<<GjO-OQPO<<GjO#nQPO<<GsOOQO,59n,59nOOQO-E7Q-E7QO-TQWO7+$OOVQPO<<HeOOQOAN=UAN=UOOQOAN=_AN=_O-[QPOAN>PO-iQWOAN>PO#sQPO'#DXO-pQPO,58xO#sQPO,59sO.RQPO1G.dO#sQPO<<HeO.aQPO'#C^O.iQPO'#C^O.nQPO7+$yOVQPO1G/_O.uQWO,59sO#sQPO'#DX",
  stateData: ".|~OzOS~OXYOkZOlZOnZOoZOp[Oq[Or]O|PO}QO!QRO!STO~OXWX!TRX!WRX~OT^O}`O!O^O!P`O~OTaO!P`O!Q`O!RaO~O!TcO!WdO~O!TcO~OXeO~OdhOehOfhOghOhhOihO~O|jO~OXYOkZOlZOnZOoZOp[Oq[Or!mO|PO}QO!QRO!S!iO~OT^O}oO!O^O!PoO~OTaO!PoO!QoO!RaO~O|jO}QO!QRO!SqO!TrO~O[sO]sO^sO_sO`sOasO~O|jO}QO!QRO!StO~Ox{aU{as{a~P#YOUvO~P#YO!VwOmbXXbXkbXlbXnbXobXpbXqbXrbX|bX}bX!QbX!SbX~OmyO~O!Y{O~P#YO!U|OdQieQifQigQihQiiQi~OxQiUQisQi~P'|O|jO}QO!QRO!S}O~O!V!POUYX~OU!RO~O!VwOmbaXbakbalbanbaobapbaqbarba|ba}ba!Qba!Sba~O!Y{a~P#YO!S!WO~O!U!XOdQqeQqfQqgQqhQqiQq~OxQqUQqsQq~P*iO!X!YOXZqkZqlZqnZqoZqpZqqZqrZq|Zq}Zq!QZq!SZq~O|jO}QO!QRO!S!ZO~O!V!POUYa~O!YQi~P'|Os!^O~P#YO!S!_O~O!YQq~P*iOx{!RU{!Rs{!R~P#YO!Y{!R~P#YO|jO}QO!QRO!S!UO!T!fO~O|jO}QO!QRO!S!]O~O!T!dO!WdO~O!T!dO~Os!gO~P#YO!Y!kO~P#YO",
  goto: "&b|PP}!]#ZPP}#}P$]$`PPPPPP$p$vPPPPPP$`PPPPPPPPP%U%[%b%hPPP%niVOWY]g{!^!c!e!g!k!m^SOWYg{!^!kSkZ!YQqcQteQ}rQ!OsQ!SwQ!U!dQ!Z!PQ!]!fZ!h]!c!e!g!m^TOWYg{!^!kQqcQteQ}rQ!U!dQ!Z!PQ!]!fZ!i]!c!e!g!miUOWY]g{!^!c!e!g!k!mRue^WOWYg{!^!kZ!c]!c!e!g!mQlZR!`!Y[gXfi!V!a!jX!emz!b!lQ_QRn_QbRRpbQ!QtR![!QQxkR!TxQXOQfWQiYQm]Svg!eQz!cQ!V{Q!a!^Q!b!gQ!j!kR!l!m",
  nodeNames: "⚠ Program EqualsExpression Identifier String Escape ) TableExpression TableName ( varList AggregateExpression CNT AVG MED MAX MIN SUM varList InfixExpression ∧ AND ∨ OR ⇒ IMPLIES PrefixExpression ∃ EXISTS . ∀ FORALL ¬ NOT LET IN",
  maxTerm: 56,
  skippedNodes: [0],
  repeatNodeCount: 4,
  tokenData: "4f~R!ROX$[XY&bYZ'{Z]$[]^&b^p$[pq&bqr$[rs(`sw$[wx(yxy)dyz*Yz{+O{|+O|}+t}!O+O!O!P,j!P!Q$[!Q![-`![!]$[!]!^.[!^!_/Q!_!`0r!`!a1j!a!c$[!c!}2`!}#O$[#O#P4a#P#R$[#R#S2`#S#T$[#T#o2`#o$r$[$r$s2`$s%%Y$[%%Y%%Z2`%%Z%&Y$[%&Y%&Z2`%&Z%&]$[%&]%&^2`%&^%'R$[%'R%'S2`%'S%'T2`%'T%'t$[%'t%'u1j%'u;'S$[;'S;=`&[<%lO$[U$cX!OQ!RSOY$[Zr$[rs%Osw$[wx%mx#O$[#P;'S$[;'S;=`&[<%lO$[S%TU!RSOY%OZw%Ox#O%O#P;'S%O;'S;=`%g<%lO%OS%jP;=`<%l%OQ%rU!OQOY%mZr%ms#O%m#P;'S%m;'S;=`&U<%lO%mQ&XP;=`<%l%mU&_P;=`<%l$[_&k_zX!OQ!RSOX$[XY&bYZ'jZ]$[]^&b^p$[pq&bqr$[rs%Osw$[wx%mx#O$[#P;'S$[;'S;=`&[<%lO$[X'oSzXXY'jYZ'j]^'jpq'j_(SS!PUzXXY'jYZ'j]^'jpq'jV(gU}R!RSOY%OZw%Ox#O%O#P;'S%O;'S;=`%g<%lO%OV)QU!QT!OQOY%mZr%ms#O%m#P;'S%m;'S;=`&U<%lO%mV)mXXP!OQ!RSOY$[Zr$[rs%Osw$[wx%mx#O$[#P;'S$[;'S;=`&[<%lO$[V*cXUP!OQ!RSOY$[Zr$[rs%Osw$[wx%mx#O$[#P;'S$[;'S;=`&[<%lO$[_+XX!UX!OQ!RSOY$[Zr$[rs%Osw$[wx%mx#O$[#P;'S$[;'S;=`&[<%lO$[V+}X!VP!OQ!RSOY$[Zr$[rs%Osw$[wx%mx#O$[#P;'S$[;'S;=`&[<%lO$[V,sXmP!OQ!RSOY$[Zr$[rs%Osw$[wx%mx#O$[#P;'S$[;'S;=`&[<%lO$[V-iZ!SP!OQ!RSOY$[Zr$[rs%Osw$[wx%mx!Q$[!Q![-`![#O$[#P;'S$[;'S;=`&[<%lO$[V.eX!XP!OQ!RSOY$[Zr$[rs%Osw$[wx%mx#O$[#P;'S$[;'S;=`&[<%lO$[V/ZZ!TP!OQ!RSOY$[Zr$[rs%Osw$[wx%mx}$[}!O/|!O#O$[#P;'S$[;'S;=`&[<%lO$[V0VX!WP!OQ!RSOY$[Zr$[rs%Osw$[wx%mx#O$[#P;'S$[;'S;=`&[<%lO$[_0}X!YW!TP!OQ!RSOY$[Zr$[rs%Osw$[wx%mx#O$[#P;'S$[;'S;=`&[<%lO$[V1sX!TP!OQ!RSOY$[Zr$[rs%Osw$[wx%mx#O$[#P;'S$[;'S;=`&[<%lO$[_2il!OQ!RS|XOY$[Zr$[rs%Osw$[wx%mx!Q$[!Q![2`![!c$[!c!}2`!}#O$[#P#R$[#R#S2`#S#T$[#T#o2`#o$r$[$r$s2`$s%%Y$[%%Y%%Z2`%%Z%&Y$[%&Y%&Z2`%&Z%&]$[%&]%&^2`%&^%'R$[%'R%'S2`%'S%'T2`%'T;'S$[;'S;=`&[<%lO$[~4fOT~",
  tokenizers: [0, 1, 2, 3],
  topRules: {"Program":[0,1]},
  specialized: [{term: 44, get: (value) => spec_word[value] || -1}],
  tokenPrec: 0
});

const RCLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ")", align: false })
            }),
            styleTags({
                // identifier: t.string,
                "AND ∧ OR ∨ IMPLIES ⇒ EXISTS ∃ FORALL ∀ NOT ¬ CNT SUM MAX MIN AVG MED": tags.operatorKeyword,
                "LET IN": tags.modifier,
                TableName: tags.definitionKeyword,
                Identifier: tags.variableName,
                String: tags.string,
                "( )": tags.paren
            })
        ]
    })
});
function RC() {
    return new LanguageSupport(RCLanguage);
}

export { RC, RCLanguage };
